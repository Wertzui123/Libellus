import io
import graphics
import json

class Booklet {
    
    property string name
    property Color color
    property LazyChunkedCanvas canvas
    property list<string> sheetFiles
    property list<Sheet> sheets
    property Sheet? currentSheet
    property int scrollX
    property int scrollY
    property bool loaded

    method construct(string name, Color color, LazyChunkedCanvas canvas, list<string> sheetFiles, int scrollX, int scrollY) {
        this.name = name
        this.color = color
        this.canvas = canvas
        this.sheetFiles = sheetFiles
        this.scrollX = scrollX
        this.scrollY = scrollY
    }

    method prepare(){
        var folder = io.join_path([self:getBookletsPath(), name])
        if(io.exists_file(io.join_path([folder, "canvas.cif"]))){
            var c = ChunkedCanvas:fromFile(io.join_path([folder, "canvas.cif"]))
            if(!io.exists_directory(io.join_path([folder, "chunks"]))){
                io.create_directory(io.join_path([folder, "chunks"]))
            }
            c.convertToLazy(io.join_path([folder, "canvas.lci"]), io.join_path([folder, "chunks"]))
            canvas = LazyChunkedCanvas:fromFile(io.join_path([folder, "canvas.lci"]), io.join_path([folder, "chunks"]))
            io.delete_file(io.join_path([folder, "canvas.cif"]))
        }elseif(io.exists_file(io.join_path([folder, "canvas.lci"]))){
            canvas = LazyChunkedCanvas:fromFile(io.join_path([folder, "canvas.lci"]), io.join_path([folder, "chunks"]))
        }

        var list<string> sheetPaths = []
        foreach(sheetFiles as file){
            sheets.add(Sheet:fromFile(string(folder) + "/sheets/" + string(file)))
            sheetPaths.add(string(folder) + "/sheets/" + string(file))
        }
        foreach(io.files(string(folder) + "/sheets") as file){
            if(!file.endsWith(".canvas.png") && !sheetPaths.contains(string(folder) + "/sheets/" + string(file))){
                sheets.add(Sheet:fromFile(string(folder) + "/sheets/" + string(file)))
                sheetFiles.add(string(file))
            }
        }
        loaded = true
    }

    // unprepare unloades the booklet from memory
    // this will automatically save the canvas of the booklet but not the sheets
    method unprepare(){
        loaded = false
        canvas.requireArea(0, 0, 0, 0)
        sheets = []
    }

    method save(bool saveOnlyMeta = false){
        var bookletsPath = self:getBookletsPath()
        if(!io.exists_directory(bookletsPath)){
            io.create_directory(bookletsPath)
        }
        if(!io.exists_directory(bookletsPath + "/" + name)){
            io.create_directory(bookletsPath + "/" + name)
        }
        var list<any> sheetsMap = []
        foreach(sheets as sheet){
            sheetsMap.add(io.file_name(sheet.file))
        }
        io.write_file(bookletsPath + "/" + name + "/booklet.json", json.encode(map<string, any>{
            "color" => map<string, any>{
                "r" => color.r,
                "g" => color.g,
                "b" => color.b,
                "a" => color.a
            },
            "sheets" => sheetsMap,
            "scroll" => map<string, any>{
                "x" => scrollX,
                "y" => scrollY
            }
        }))
        if(!saveOnlyMeta){
            canvas.save(bookletsPath + "/" + name + "/canvas.lci")
            if(!io.exists_directory(bookletsPath + "/" + name + "/sheets")){
                io.create_directory(bookletsPath + "/" + name + "/sheets")
            }
            foreach(sheets as sheet){
                if(sheet.hasChanged){
                    sheet.hasChanged = false
                    sheet.save()
                }
            }
        }
    }

    [static]
    method getBookletsPath() returns string{
        var bookletsPath = "booklets"
        $if android{
            var packageId = "com.wertzui123.libellus"
            bookletsPath = "/data/data/" + packageId + "/files/booklets"
        }
        return bookletsPath
    }

}