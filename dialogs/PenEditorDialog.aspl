import graphics
import math.geometry
import io

import libellus
import libellus.utils

class PenEditorDialog extends Dialog {

    // TODO: Add a color picker

    property Window window
    property Rectangle bounds{
        get{
            return new Rectangle(new Point(float(libellus.get_booklet_list_width(window) + (window.width - libellus.get_booklet_list_width(window)) / 2f - (window.width - libellus.get_booklet_list_width(window)) / 4f), float(libellus.get_toolbar_height(window) + (window.height - libellus.get_toolbar_height(window)) / 2f - (window.height - libellus.get_toolbar_height(window)) / 4f)), new Size(float((window.width - libellus.get_booklet_list_width(window)) / 4f * 2), float((window.height - libellus.get_toolbar_height(window)) / 4f * 2)))
        }
    }

    property Booklet booklet
    
    property Rectangle deleteIconBounds{
        get{
            var min = float(math.min((window.width - libellus.get_booklet_list_width(window)) / 6d, (window.height - libellus.get_toolbar_height(window)) / 6d))
            return new Rectangle(new Point(float(libellus.get_booklet_list_width(window) + (window.width - libellus.get_booklet_list_width(window)) / 2f - min / 2f), float(libellus.get_toolbar_height(window) + (window.height - libellus.get_toolbar_height(window)) / 2f - min / 2f)), new Size(min, min))
        }
    }

    property list<Color> colors = [
        new Color(255, 0, 0, 0),
        new Color(255, 128, 128, 128),
        new Color(255, 255, 0, 0),
        new Color(255, 128, 0, 0),
        new Color(255, 0, 255, 0),
        new Color(255, 0, 128, 0),
        new Color(255, 0, 0, 255),
        new Color(255, 0, 0, 128),
        new Color(255, 255, 255, 0),
        new Color(255, 255, 165, 0)
    ]

    property Pen pen

    method construct(Window window, Booklet booklet, Pen pen){
        this.window = window
        this.booklet = booklet
        this.pen = pen
    }

    method draw(Canvas canvas){
        if(AppState:theme == Theme.Light){
            canvas.fillRectangle(bounds, new Color(255, 230, 230, 234))
        }else{
            canvas.fillRectangle(bounds, new Color(255, 26, 22, 30))
        }
        canvas.drawRectangle(bounds, new Color(255, 64, 64, 64))
        repeat(5, i = 1){
            var color = colors[i - 1]
            if(AppState:theme == Theme.Dark && color.r == 0b && color.g == 0b && color.b == 0b){
                color = new Color(255, 255, 255, 255)
            }
            canvas.fillCircle(new Ellipse(
                new Point(
                        float(libellus.get_booklet_list_width(window) + (window.width - libellus.get_booklet_list_width(window)) / 2f + (i - 3) * (window.width - libellus.get_booklet_list_width(window)) / 16f),
                        float(libellus.get_toolbar_height(window) + (window.height - libellus.get_toolbar_height(window)) / 2f) - bounds.size.height / 4f
                    ),
                    new Size(
                        float((window.width - libellus.get_booklet_list_width(window)) / 16f / 4),
                        float((window.height - libellus.get_toolbar_height(window)) / 16f / 4))
                ),
                color)
        }
        repeat(5, i = 1){
            var color = colors[i - 1 + 5]
            if(AppState:theme == Theme.Dark && color.r == 0b && color.g == 0b && color.b == 0b){
                color = new Color(255, 255, 255, 255)
            }
            canvas.fillCircle(new Ellipse(
                new Point(
                        float(libellus.get_booklet_list_width(window) + (window.width - libellus.get_booklet_list_width(window)) / 2f + (i - 3) * (window.width - libellus.get_booklet_list_width(window)) / 16f),
                        float(libellus.get_toolbar_height(window) + (window.height - libellus.get_toolbar_height(window)) / 2f)
                    ),
                    new Size(
                        float((window.width - libellus.get_booklet_list_width(window)) / 16f / 4),
                        float((window.height - libellus.get_toolbar_height(window)) / 16f / 4))
                ),
                color)
        }
        repeat(5, i = 1){
            var color = new Color(255, 200, 200, 200)
            if(pen.thickness == i + 1){
                color = new Color(255, 235, 235, 255)
            }
            canvas.fillCircle(new Ellipse(
                new Point(
                        float(libellus.get_booklet_list_width(window) + (window.width - libellus.get_booklet_list_width(window)) / 2f + (i - 3) * (window.width - libellus.get_booklet_list_width(window)) / 16f),
                        float(libellus.get_toolbar_height(window) + (window.height - libellus.get_toolbar_height(window)) / 2f) + bounds.size.height / 4f
                    ),
                    new Size(
                        float((i / 2f) * (window.width - libellus.get_booklet_list_width(window)) / 16f / 8),
                        float((i / 2f) * (window.height - libellus.get_toolbar_height(window)) / 16f / 8))
                ),
                color)
            if(pen.thickness == i + 1){
                canvas.drawCircle(new Ellipse(
                    new Point(
                            float(libellus.get_booklet_list_width(window) + (window.width - libellus.get_booklet_list_width(window)) / 2f + (i - 3) * (window.width - libellus.get_booklet_list_width(window)) / 16f),
                            float(libellus.get_toolbar_height(window) + (window.height - libellus.get_toolbar_height(window)) / 2f) + bounds.size.height / 4f
                        ),
                        new Size(
                            float((i / 2f) * (window.width - libellus.get_booklet_list_width(window)) / 16f / 8),
                            float((i / 2f) * (window.height - libellus.get_toolbar_height(window)) / 16f / 8))
                    ),
                    new Color(255, 0, 0, 0))
            }
        }
    }

    method onPointerDown(Point position){
    }

    method onPointerMove(Point from, Point to){
    }

    method onPointerUp(Point position){
        repeat(5, i = 1){
            if(new Ellipse(
                new Point(
                        float(libellus.get_booklet_list_width(window) + (window.width - libellus.get_booklet_list_width(window)) / 2f + (i - 3) * (window.width - libellus.get_booklet_list_width(window)) / 16f),
                        float(libellus.get_toolbar_height(window) + (window.height - libellus.get_toolbar_height(window)) / 2f) - bounds.size.height / 4f
                    ),
                    new Size(
                        float((window.width - libellus.get_booklet_list_width(window)) / 16f / 4),
                        float((window.height - libellus.get_toolbar_height(window)) / 16f / 4))
                ).containsPoint(position)){
                    pen.color = colors[i - 1]
                    CacheUtils:hasPenColorChanged = true
                    AppState:dialog = null
                    isInUpAction = true
                    return
            }
        }
        repeat(5, i = 1){
            if(new Ellipse(
                new Point(
                        float(libellus.get_booklet_list_width(window) + (window.width - libellus.get_booklet_list_width(window)) / 2f + (i - 3) * (window.width - libellus.get_booklet_list_width(window)) / 16f),
                        float(libellus.get_toolbar_height(window) + (window.height - libellus.get_toolbar_height(window)) / 2f)
                    ),
                    new Size(
                        float((window.width - libellus.get_booklet_list_width(window)) / 16f / 4),
                        float((window.height - libellus.get_toolbar_height(window)) / 16f / 4))
                ).containsPoint(position)){
                    pen.color = colors[i - 1 + 5]
                    CacheUtils:hasPenColorChanged = true
                    AppState:dialog = null
                    isInUpAction = true
                    return
            }
        }
        repeat(5, i = 1){
            if(new Ellipse(
                new Point(
                        float(libellus.get_booklet_list_width(window) + (window.width - libellus.get_booklet_list_width(window)) / 2f + (i - 3) * (window.width - libellus.get_booklet_list_width(window)) / 16f),
                        float(libellus.get_toolbar_height(window) + (window.height - libellus.get_toolbar_height(window)) / 2f) + bounds.size.height / 4f
                    ),
                    new Size(
                        float((i / 2f) * (window.width - libellus.get_booklet_list_width(window)) / 16f / 8),
                        float((i / 2f) * (window.height - libellus.get_toolbar_height(window)) / 16f / 8))
                ).containsPoint(position)){
                    pen.thickness = i + 1
                    AppState:dialog = null
                    isInUpAction = true
                    return
            }
        }
    }
    
}